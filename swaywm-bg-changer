#!/usr/bin/python

"""
sway-bg-changer
This program is designed to take in a folder of images and rotate the background image to
a random picture in a provided folder.
"""

import argparse
import daemon
import json
import os
import random
import socket
import struct
import sys
import time

try:
  SWAYSOCK=os.environ['SWAYSOCK']
except KeyError:
  print("SWAYSOCK not set, are you running swaywm?")
  sys.exit(1)

IPC_MAGIC = b"i3-ipc"
IPC_HEADER = "=6s I I"
IPC_HEADER_SIZE = struct.calcsize(IPC_HEADER)

def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)

"""
run_sway_command sets up the socket and handles io
header is a struct packed object that cannot be null
payload is also a struct packed object, but can be null if it is not needed
"""
def run_sway_command(header, payload):
  if header == None or len(header) == 0:
    return
  sway_socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  try:
    sway_socket.connect(SWAYSOCK)
    if sway_socket.send(header, IPC_HEADER_SIZE) < 0:
      eprint("Failed to send IPC header")
    if payload != None:
      sway_socket.sendall(payload)

    header_resp_raw = sway_socket.recv(IPC_HEADER_SIZE)
    header_resp = struct.unpack(IPC_HEADER, header_resp_raw)
    data_size = int(header_resp[1])
    msg_type = int(header_resp[2])
    data = sway_socket.recv(data_size)
  finally:
    sway_socket.close()
  return json.loads(data)

def get_outputs():
  msg = struct.pack(IPC_HEADER, IPC_MAGIC, 0, 3)
  data = run_sway_command(msg, None)
  monitor_list = list()
  for monitor in data:
    name = monitor['name']
    monitor_list.append(name)
  return monitor_list

def set_background(display, bg):
  cmd = "output %s bg %s stretch" % (display, bg)
  cmdsize = len(cmd)
  cmd = cmd.encode()
  msg = struct.pack(IPC_HEADER, IPC_MAGIC, cmdsize, 0)
  payload = struct.pack("%ss" % cmdsize, cmd)
  return run_sway_command(msg, payload)

def get_bg(bg_dir):
  files = [f for f in os.listdir(bg_dir) if os.path.isfile(os.path.join(bg_dir, f))]
  size = len(files)
  return os.path.join(bg_dir, files[random.randint(0, size-1)])

def is_image(bg):
  return False

def swaywm_bg_changer():
  for output in get_outputs():
    bg = get_bg("/home/donofrj/Pictures/wallpaper")
    data = set_background(output, bg)
    status = data[0]['success']
    if status:
      print("Set background for %s to %s" % (output, bg))
    else:
      print("Failed to set %s to %s" % (output, bg))

def daemon_mode(timeout):
  with daemon.DaemonContext():
    while True:
      swaywm_bg_changer()
      time.sleep(timeout)


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument("bg_dir", help="Path to directory containing images")
  parser.add_argument("-d", "--daemon", help="Daemonize the process", action="store_true")
  parser.add_argument("-t", "--timeout", help="How often to change background images in minutes", default=30, type=int)
  args = parser.parse_args()
  d = args.daemon
  t = args.timeout * 60
  if d:
    daemon_mode(t)
  else:
    swaywm_bg_changer()

if __name__ == "__main__":
  main()
